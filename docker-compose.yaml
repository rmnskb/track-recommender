services:
  pg:
    image: postgres:17
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - "./app/db/music_data:/var/lib/postgresql/data:rw"
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  api:
    container_name: flask-api
    build:
      context: ./app
      dockerfile: Dockerfile
    stop_signal: SIGINT
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      pg:
        condition: service_healthy
    links:
      - pg
    ports:
      - 5000:5000
    volumes:
      - ./app:/app
    working_dir: /app
    healthcheck:
      test: [ "CMD-SHELL" "curl --fail http://localhost:5000/api/v1/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      bash -c "python db/etl.py && python recommender.py && python app.py"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:80
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL" "curl --fail http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

volumes:
  music_data:
